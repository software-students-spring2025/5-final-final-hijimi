# .github/workflows/frontend.yml
name: Frontend CI/CD

on:
  push:
    branches:
      - main
      - master
      - xingjian1
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend.yml'
  pull_request:
    branches:
      - main
      - master
      - xingjian1
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend.yml'
    
jobs:
  # Add a test job if needed (e.g., HTML linting, link checking, JS tests if using a framework)
  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #     - name: Run frontend tests/linters (Placeholder)
  #       run: echo "Running frontend checks... (implement specific steps)"

  build-and-push:
    # needs: test # Uncomment if you add a test job
    runs-on: ubuntu-latest
    if: github.event_name == 'push' # Only build/push on merge/push to main/master
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }} # Needs to be configured in GitHub Secrets
          password: ${{ secrets.DOCKERHUB_TOKEN }}    # Needs to be configured in GitHub Secrets

      - name: Build and push Frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-frontend:latest # Replace with your Docker Hub username
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-frontend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-frontend:buildcache,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - name: Set up DO CLI
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} # Needs DO access token

      - name: Deploy to DigitalOcean App Platform
        run: |
          echo "Deploying Frontend to DO... (implement specific steps)"
          # Example: Trigger a deployment update for a DO App
          # doctl apps create-deployment <YOUR_APP_ID> --from-registry ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-frontend
          # Replace <YOUR_APP_ID> with your actual DigitalOcean App ID 