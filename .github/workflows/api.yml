# .github/workflows/api.yml  
name: API CI/CD

on:
  push:
    branches: [main, master,xingjian4]
  pull_request:
    branches: [main, master,xingjian4]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@1.9.0
        with:
          mongodb-version: '6.0'
      
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9' 

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r api/requirements.txt
          pip install -r recommender/requirements.txt 
          pip install pytest pytest-cov httpx
        
      - name: Run tests with coverage
        run: |
          export PYTHONPATH=$(pwd):$(pwd)/recommender
          pytest -v --cov=api api/tests/ --cov-report=xml --cov-report=term

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push API image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./api/Dockerfile 
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-api:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-api:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-api:buildcache,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/xingjian4')
    steps:
      - name: Set up DO CLI
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Deploy to DigitalOcean App Platform
        run: |
          echo "Deploying API to DigitalOcean..."
          doctl apps create-deployment 3a231e21-242c-4d42-9d1a-663a93c5ef05 --access-token ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
